export default{info:{display:"Data Types"},actionString:'\n{\n\t"index.html": ["<!DOCTYPE html>\\n<html>\\n<head>\\n</head>\\n<body>\\n  <script src=\\"main.js\\"><\/script>\\n</body>\\n</html>", "utf-8"],\n\t"main.js": ["// alerts \\"number\\"\\nalert(typeof 1);\\n\\n// alerts \\"object\\"\\nalert(typeof { });\\n\\n// alerts \\"function\\"\\nalert(typeof function () { });", "utf-8"]\n}\n\n---\n\nThis tutorial will describe data types, what they are, why they are important and using the `typeof` operator to determine the data type of a value.\n\n---\n\nIn JavaScript, all data has a data type. Data in this case refers to the values stored in variables, values that have been evaluated from expressions, values returned from functions, etc.\n\nThis tutorial will cover 5 different primitive data types:\n`undefined`\n`number`\n`string`\n`boolean`\n`null`\n\nIt will then cover 3 reference types:\n`object`\n`array`\n`function`\n\n---\n\nVariables that are of the primitive data type store the value itself, whereas reference type variables store a reference to a value. Take the following example:\n<[text/javascript\nvar a = 1;\nvar b = a;\na = 0;\n\n// will still display 1\nalert(b);\n]>\n\n`a` is initialized to 1.\nThe value of `a` is copied to `b`.\nThe value of `a` is changed.\nAn alert is created displaying the value of `b`, which is still `1`. This is because numbers are primitive types, and the value `1` was copied to `b`.\n\n---\n\nThe direct value of reference type variables is not actually a function, array or object, but instead a reference to that function, array or object:\n<[text/javascript\nvar a = {};\nvar b = a;\na.someKey = "someValue";\n\n// will display someValue\nalert(b.someKey);\n]>\n\n`a` is initialized to `{}`.\nThe value of `a` is copied to `b`. In this case the value is not the empty object itself, but instead a reference to that object. Therefore, there is only 1 object and `a` and `b` both reference that same object.\nA value of the object referenced by `a` is changed.\nAn alert is created displaying the value of `b.someKey`, which is "someValue". This is because objects are reference types. `var b = a` makes `b` refer to the same object that `a` does.\n\n---\n\nAnything stored in a variable, anything returned from a function, evaluated from an expression, etc., has a data type.\n\nSome common primitive types are:\n`undefined` | `undefined` is the default value for variables that are not given a value, functions that do not return anything, and in general is just used to represent the absence of a value.\n`number` | This can be any number, such as `1`, `9009` or `-2.555`. `1,000,000` would be invalid syntax, because numbers never contain commas.\n`string` | A string is a group of characters. They can be created using `"some string value"` or `\'some string value\'`.\n`boolean` | There are only 2 possible values within the boolean data type, `true` and `false`.\n`null` | `null` is similar to `undefined`, in the fact that it is usually used to represent the absence of any value.\n\nSome common reference types are:\n`object` | An object is a data type that has properties that can be modified. Technically, all other reference types are objects. Objects can be created with `{}`.\n`array` | An array is a list of values. These can be anything from numbers to functions and even arrays themselves. Arrays can be created using `[1, "some other value", [], ... as many more values as needed ...]`.\n`function` | Similar to a mathematical function, this is a set of code that can be used to calculate a value based on an input, or perform some action in another way.\n\n---\n\nIf this data type ever needs to be determined, this can be done with the `typeof` operator:\n<[text/javascript\n// alerts "number"\nalert(typeof 1);\n\n// alerts "object"\nalert(typeof { });\n\n// alerts "function"\nalert(typeof function () { });\n]>\n\n---\n\nClick the run button.\n>>>\n'};